# -*- coding: utf-8 -*-
"""lab-3

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Zde6XI_EL7s-qSPo9jQZ5B8RMWRXQYT9
"""

def lineUp(aList1, aList2):
  #Base Case
  if aList1 == []:
      return True
  if len(aList2) == 0:
     return False
  #recursive case
  else:
      if aList1[0] != aList2[0]: #checking if 1st element of aList1 == 1st element aList2
        aList2.pop(0)
        return lineUp(aList1, aList2)
      else:
        return lineUp(aList1[1:], aList2[1:])
    
   
def flat(alist):
    #Base Case
    if alist == []:
        return alist
    #Recursive Case
    if type(alist[0]) == list:
        return flat(alist[0]) + flat(alist[1:])  
    return alist[:1] + flat(alist[1:]) # returning single values and inserting rest in recursion 

    
        
def neighbor(n):
   #base Case
   if n//10 == 0:#if n is single digit , return the value 
     return n
   #recursive case
   if n%10 != n//10%10:
      x = n%10
      return neighbor(n//10)*10+x
   else:
      return neighbor(n//10)





